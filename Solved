	Divide and Conquer

Picture 1  
1. You are given an integer N and an array of N integers. The data is a cubed profile of a mountain range in a flat world (Figure 1). Consider a lake of water bounded between two peaks with sufficient height and not divided into parts. The volume of a lake is counted in the number of squares it consists of. For a given profile of mountains, output the maximum possible volume of one lake that can appear in this profile.
2. You are given an integer N and an array of N integers. The data is a cubed profile of a mountain range in a flat world (Figure 1). Dwarfs build their mines in these mountains to extract ore. These shafts always run horizontally, and at the same time from both sides they must go to the surface (not going beyond the array). It is believed that the mine produces ore in an amount proportional to the volume of rocks above the mine, this volume is calculated by the number of cubes. Print the indices of 2 array elements between which you can draw the most profitable gnome mine.
3. You are given an integer N and an array of N integers. The data is a profile of ice icicles on the roof slope (Figure 1, white part). The icicle can only break off along a horizontal line, and the length of the icicle must be greater than or equal to the width. The ends of the array are not counted as the edges of the icicle. What is the longest icicle that can fall?
4. You are given an integer N and an array of N integers. The data is a cubed profile of a mountain range in a flat world (Figure 1). Let the goat move through the mountains from left to right. Because of the wind and sun, the grass grows only on the southern side of the mountains (let it be on the right for us). Therefore, if in a step to the left to the right the goat rises higher, it will lose one energy, if it goes down, it will receive one energy, if the level does not change, then the energy level of the goat will not change. Where will he get the most energy benefit? Its energy indicator on a segment can have negative values, because he has a sufficient initial supply of energy.
5. Задано целое число N и массив из N целых чисел. Данные представляют собой профиль горной гряды в плоском мире в виде кубиков (Рисунок 1). Канатоходец хочет поставить рекорд и пройти по канату максимальную дистанцию. Он может протянуть канат параллельно земле, между двумя точками на поверхности горы, если ему ничего не мешает. По заданному профилю гор найдите максимально длинный канат, который он может протянуть.
6. You are given an integer N and an array of N integers. The data is a cubed profile of a mountain range in a flat world (Figure 1). Let the camel move through the mountains from left to right. We assume that there is water only in ravines, that is, at points of local minimum. For each step, the camel spends 1 unit of water, if at the same time it rises higher, then it spends another 1 unit of water. At the points of the local minimum, it is filled with 10 units of water. Find where it will get the most water benefit. It can be assumed that he will never be dehydrated, because it has an initial hump headroom.
Figure 2  
7. You are given an integer N and an array of N integers. These numbers represent a graph of the function (Figure 2) with integer values ​​in integer coordinates. In data analysis, it is often necessary to find cases of stability of some indicator, i.e. minimal changes over time. Find the longest interval in which the values ​​of the function change by no more than 3 (the difference between the maximum and minimum).
8. You are given an integer N and an array of N integers. These numbers represent a graph of the function (Figure 2) with integer values ​​in integer coordinates. In data analysis, it is often necessary to find cases of fluctuations of some indicator, i.e. frequent changes in a short time. Let the fluctuation indicator be calculated as follows, for each value in the integer coordinate, which is a local maximum or minimum, 2 points are added, for those that are not such, 1 point is subtracted. Find the interval in which the fluctuation index is maximum.
9. You are given an integer N and an array of N integers. These numbers represent a graph of the function (Figure 2) with integer values ​​in integer coordinates. We will consider a special efficiency indicator as follows, efficiency +2: if the function has increased in a step by more than 5%, efficiency is -2: if the function has decreased in a step by more than 5%, and -1: if the function has changed by less than 5% ... During what period was the growth efficiency at its maximum?
10. You are given an integer N and an array of N integers. These numbers represent a graph of the function (Figure 2) with integer values ​​in integer coordinates. In data science, there is often a need to identify anomalies. Consider the following method: for adjacent two elements, enter the anomaly indicator equal to 4, if their difference is more than the difference in absolute value of the previous pair by more than 3 times, otherwise the anomaly indicator for this pair is considered equal to -1. Find the area with the highest concentration of anomalies, i.e. at which the sum of the anomaly indicators will be maximum.


from scipy.signal import find_peaks
import numpy as np
import matplotlib.pyplot as plt
import copy
data = [27, 33, 32, 31, 30, 29, 28, 27, 30, 33, 35, 37, 40, 44, 43, 39, 35, 32, 31, 28, 26, 24, 23, 20, 20, 22, 25, 29, 32, 37, 41, 42, 41, 38, 35, 31, 29, 26, 25, 22, 21, 18, 17, 15, 17, 18, 20, 21, 23, 24, 26, 29, 30, 32, 35, 35, 31, 26, 24, 22, 21, 23, 25, 27, 30, 33, 35, 38, 39, 42, 44, 48, 43]
graph_array = [300, 290, 390, 340, 410, 610, 790, 440, 530, 320]

peaks = find_peaks(data, height = 1)

#This is a height and x-axes position of peaks
height = peaks[1]['peak_heights']

peak_pos = peaks[0]
# 1 Task

# sum = []

# for i in range(0, len(peak_pos) - 1, 1):
#     sum.append(0)
#     for j in range(peak_pos[i] + 1, peak_pos[i+1] - 1, 1):
#         if min(data[peak_pos[i+1]], data[peak_pos[i]]) <= data[j]:
#             continue
#         else:
#             sum[i] += min(data[peak_pos[i+1]], data[peak_pos[i]]) - data[j]

# print(max(sum))

# # 2 Task
# print(peak_pos)
# print(height)

# first_max_peak = np.where(height == max(height))[0]

# height = np.delete(height, first_max_peak)

# second_max_peak = np.where(height == max(height))[0]

# for i in range(int(peak_pos[second_max_peak]) + 1, int(peak_pos[first_max_peak]), 1):
#     if height[second_max_peak] <= data[i]:
#         print(i - peak_pos[second_max_peak])
#         break
#     else:
#         continue

# # Task 3

# def MinForGraph(array):
#     min = [] 
#     for i in range(1, len(array)-1):
#         if array[i-1] > array[i] < array[i+1]:
#             min.append(i)
#     return min

# PI, actual, peak, minPeak = [[],[]], [[],[]], list(find_peaks(graph_array)[0]), MinForGraph(graph_array)
# for i in range(len(graph_array)-1):
#     coef = (graph_array[i+1]-graph_array[i])/graph_array[i]
#     if coef >= 0.05:
#         actual[0].append(2)
#         actual[1].append(i)
#     elif coef <= -0.05:
#         actual[0].append(-2)
#         actual[1].append(i)
#     elif coef >= 0.02:
#         actual[0].append(1)
#         actual[1].append(i)
#     elif coef <= -0.02:
#         actual[0].append(-2)
#         actual[1].append(i)
#     if sum(actual[0]) >= sum(PI[0]):
#         PI = actual
#     if graph_array[i] > graph_array[i+1]:
#         actual = [[], []]
# x = [i for i in range(1, len(graph_array)+1)]
# for i in range(len(x)):
#     x[i] -= 0.5

# figure = plt.figure()
# ax = figure.add_subplot()
# ax.plot(x, graph_array, color = 'red', linewidth=4, linestyle='-', marker='o', markersize=12)
# x = [i+0.5 for i in PI[1]]
# ax.plot(x, graph_array[PI[1][0]:PI[1][-1]+1], color='green', linewidth=6, marker='o', markersize=14)
# plt.title('FUN', color='white', fontsize=24)
# plt.show()

# # Task 4

# width = []

# for i in range(0, len(peak_pos) - 1, 1):
#     for j in range(peak_pos[i] + 1, peak_pos[i+1] - 1, 1):
#         if min(data[peak_pos[i+1]], data[peak_pos[i]]) <= data[j]:
#             if min(data[peak_pos[i+1]], data[peak_pos[i]]) == data[peak_pos[i+1]]:
#                 width.append(abs(j - peak_pos[i+1]))
#             else:
#                 width.append(abs(j - peak_pos[i]))
#             break
#         else:
#             continue
# print(width)

# arr = []

# for i in range(0, len(peak_pos) - 1, 1):
#     for j in range(peak_pos[i] + 1, peak_pos[i+1] - 1, 1):
#         if (min(data[peak_pos[i+1]], data[peak_pos[i]]) - data[j]) < 0:
#             continue
#         arr.append(min(data[peak_pos[i+1]], data[peak_pos[i]]) - data[j]) 
#     if max(arr) < width[i]:
#         np.delete(width, i)
        
# print(max(arr))


# Task 5
# PI, actual = [[], []], [[], []] 
# for i in range(len(data)-1):
#     if data[i] > data[i+1]:
#         actual[0].append(1)
#         actual[1].append(i)
#     elif data[i] == data[i+1]:
#         actual[0].append(0)
#         actual[1].append(i)
#     if sum(actual[0]) > sum(PI[0]):
#         PI = actual
#     if data[i] < data[i+1]:
#         actual = [[], []]
# print(PI[1][0], PI[1][-1]+1)
